# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bm-oGBAkDjrtR3R0sKhTsJOi5ZbnoyUc
"""

# importing packages
import pandas as pd
import re
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

nltk.download('punkt_tab')
nltk.download('stopwords')

# data loading
df = pd.read_csv("2011Tornado_Summary.csv")
#df = pd.read_csv('/content/2011Tornado_Summary.csv')
df.head()

# Preprocessing function
def preprocess_text(text):
    # Remove URLs
    text = re.sub(r"http\S+|www\S+|https\S+", '', text)
    # Remove mentions and hashtags
    text = re.sub(r"@\w+|#\w+", '', text)
    # Remove special characters and numbers
    text = re.sub(r"[^a-zA-Z\s]", '', text)
    # Convert to lowercase
    text = text.lower()
    return text

# Applying preprocessing to the 'text' column
df['cleaned_text'] = df['text'].apply(preprocess_text)

# Displaying the first few rows
df[['text', 'cleaned_text']].head()

nltk.download('vader_lexicon')
sia = SentimentIntensityAnalyzer()

# VADER Sentiment Analysis Function
def analyze_sentiment(text):
    scores = sia.polarity_scores(text)
    # Categorize sentiment
    if scores['compound'] >= 0.05:
        sentiment = 'Positive'
    elif scores['compound'] <= -0.05:
        sentiment = 'Negative'
    else:
        sentiment = 'Neutral'
    return sentiment, scores

# Analyzing dataset
def analyze_dataset(data):
    if "Cleaned Text" not in data.columns:
        data["Cleaned Text"] = data["Text"].apply(lambda x: x.lower())
    # Applying VADER sentiment analysis
    data["Sentiment"] = data["Cleaned Text"].apply(
        lambda x: analyze_sentiment(x)[0]
    )
    return data

data = pd.DataFrame({"Text": ["I love tornado shelters!", "This is so bad!", "the sun is rising."]})
data = analyze_dataset(data)
print(data)

# Predicting sentiment for new text
new_text = "eventhough there was a tornado last night, nothing happened"
cleaned_text = preprocess_text(new_text)
predicted_sentiment = analyze_sentiment(cleaned_text)

print(f"Text: {new_text}")
print(f"Predicted Sentiment: {predicted_sentiment}")

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import StringIO

# App navigation
st.sidebar.title("Sentiment Analyzer")
page = st.sidebar.radio("Navigate", ["Home", "Analysis", "Reports"])

# Function to preprocess and predict sentiments for a dataset
def analyze_dataset(data):
    """
    Analyze a dataset and predict sentiments for each tweet.
    """
    data["Cleaned Text"] = data["text"].apply(preprocess_text)
    data["Sentiment"] = data["Cleaned Text"].apply(
        lambda x: analyze_sentiment(x)[0]
    )  # Predicting sentiment
    return data

# Initializing session state
if "analysis_data" not in st.session_state:
    st.session_state.analysis_data = None  # For dataset analysis
if "analysis_text" not in st.session_state:
    st.session_state.analysis_text = None  # For single text input
if "analysis_scores" not in st.session_state:
    st.session_state.analysis_scores = None  # For single text sentiment scores

if page == "Home":
    st.title("Sentiment Analyzer")
    st.write("To understand public sentiment during events in real-time.")
    st.write(
        "Our app helps organizations analyze sentiment for data to provide actionable insights, understand public opinion, and enhance decision-making./n/n Go and analyze the Sentiment now to unlock valuable insights!"
    )
    st.text_input("Follow the latest trends with our daily newsletter", placeholder="you@example.com")
    st.button("Submit")

elif page == "Analysis":
    st.title("Analysis")
    st.write("Analyze the sentiment of data or text")

    # Input option selection
    input_option = st.radio("Select input type:", ["Upload a CSV file", "Enter a single text"])

    if input_option == "Upload a CSV file":
        # File upload for analysis
        uploaded_file = st.file_uploader("Upload a CSV file for sentiment analysis", type=["csv"])

        if uploaded_file:
            # for loading the dataset
            data = pd.read_csv(uploaded_file)
            st.write("### Uploaded Dataset")
            st.dataframe(data.head())

            # Analyzing dataset
            data = analyze_dataset(data)

            # Saving analyzed dataset to session state
            st.session_state.analysis_data = data
            st.session_state.analysis_text = None  # Clear any previous text input

            # Displaying analyzed dataset
            st.write("### Analyzed Dataset")
            st.dataframe(data[["text", "Sentiment"]].head())


    elif input_option == "Enter a single text":
        # Text input for analysis
        user_input = st.text_area("Enter a text:", placeholder="Type something...")

        if st.button("Analyze Sentiment"):
            if user_input.strip() == "":
                st.warning("Please enter some text to analyze.")
            else:
                # Performing sentiment analysis on user input
                sentiment, scores = analyze_sentiment(user_input)

                # Save analyzed text and scores to session state
                st.session_state.analysis_text = user_input
                st.session_state.analysis_scores = scores
                st.session_state.analysis_data = None  # Clear any previous dataset input

                st.subheader(f"Predicted Sentiment: {sentiment}")
                st.write("Sentiment Scores:")
                st.json(scores)


elif page == "Reports":
    st.title("Reports")
    st.write("Sentiment analysis results")

    if st.session_state.analysis_data is not None:
        # Reports for uploaded dataset
        data = st.session_state.analysis_data

        st.write("### Data Preview")
        st.dataframe(data[["text", "Sentiment"]].head())

        # Visualizing sentiment distribution
        sentiment_counts = data["Sentiment"].value_counts()
        fig, ax = plt.subplots()
        ax.pie(sentiment_counts, labels=sentiment_counts.index, autopct='%1.1f%%', startangle=90)
        ax.set_title("Pie chart of Sentiment Distribution")
        st.pyplot(fig)

        st.write("### Sentiment Trends Over Time")
        fig, ax = plt.subplots()
        sentiment_counts.plot(kind="bar", color=["green", "orange", "red"], ax=ax)
        ax.set_xlabel("Sentiment")
        ax.set_ylabel("Number of Tweets")
        st.pyplot(fig)

    elif st.session_state.analysis_text is not None:
        # Reports for entered text
        user_input = st.session_state.analysis_text
        scores = st.session_state.analysis_scores

        st.write("### Analyzed Text")
        st.write(f"**Input Text:** {user_input}")

        # Bar chart of sentiment scores
        st.write("### Sentiment Scores")
        fig, ax = plt.subplots()
        ax.bar(scores.keys(), scores.values(), color=["green", "orange", "red"])
        ax.set_ylabel("Score")
        ax.set_title("Bar Chart of Sentiment Scores")
        st.pyplot(fig)

    else:
        st.warning("No analysis data available. Please perform analysis first on the Analysis page.")
